{"version":3,"file":"js/935.43c3e472.js","mappings":"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","sources":["webpack://@mx-design/example/./src/pages/table/examples/basic.tsx","webpack://@mx-design/example/./src/pages/table/examples/filter.tsx","webpack://@mx-design/example/./src/pages/table/examples/back-end-filter.tsx","webpack://@mx-design/example/./src/pages/table/examples/single-sort.tsx","webpack://@mx-design/example/./src/pages/table/examples/back-end-single-sort.tsx","webpack://@mx-design/example/./src/pages/table/examples/multi-sort.tsx","webpack://@mx-design/example/./src/pages/table/examples/back-end-multi-sort.tsx","webpack://@mx-design/example/./src/pages/table/examples/uncontrolledPagination.tsx","webpack://@mx-design/example/./src/pages/table/examples/expand-row.tsx","webpack://@mx-design/example/./src/pages/table/examples/nested-table.tsx","webpack://@mx-design/example/./src/pages/table/examples/tree-data.tsx","webpack://@mx-design/example/./src/pages/table/examples/custom-cell.tsx","webpack://@mx-design/example/./src/pages/table/examples/fixed-column.tsx","webpack://@mx-design/example/./src/pages/table/examples/fixed-header.tsx","webpack://@mx-design/example/./src/pages/table/examples/group-columns.tsx","webpack://@mx-design/example/./src/pages/table/examples/cell-merge.tsx","webpack://@mx-design/example/./src/pages/table/examples/index.ts","webpack://@mx-design/example/./src/pages/table/index.tsx"],"sourcesContent":["import { Basic } from '../locale';\n\nconst code = `\nimport { Table } from '@mx-design/web';\n\nfunction App() {\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      width: 174,\n    },\n    {\n      title: 'Salary',\n      dataIndex: 'salary',\n      width: 100,\n    },\n    {\n      title: 'Address',\n      dataIndex: 'address',\n      width: '40%',\n    },\n    {\n      title: 'Email',\n      dataIndex: 'email',\n      width: '60%',\n    },\n  ];\n  const data = [\n    {\n      key: '1',\n      name: 'Jane Doe',\n      salary: 23000,\n      address: '32 Park Road, London',\n      email: 'jane.doe@example.com',\n    },\n    {\n      key: '2',\n      name: 'Alisa Ross',\n      salary: 25000,\n      address: '35 Park Road, London',\n      email: 'alisa.ross@example.com',\n    },\n    {\n      key: '7',\n      name: 'Kevin Sandra',\n      salary: 22000,\n      address: '31 Park Road, London',\n      email: 'kevin.sandra@example.com',\n    },\n  ];\n\n  return <Table columns={columns} data={data} />;\n}`;\n\nexport const basic = {\n  code,\n  namespace: Basic,\n};\n","import { Filter } from '../locale';\n\nconst code = `\nimport { Table, Input } from '@mx-design/web';\n\nconst CheckboxGroup = Checkbox.Group;\nconst options = [\n  {\n    label: 'programmer',\n    value: 'programmer',\n  },\n  {\n    label: 'cook',\n    value: 'cook',\n  },\n  {\n    label: 'athletes',\n    value: 'athletes',\n  },\n];\nconst miniBtnStyle = { fontSize: '12px', padding: '0 11px', height: '24px' };\nfunction App() {\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      width: 174,\n      filterDropdown: ({ value, setFilterValue, close }) => {\n        const [state, setState] = React.useState(value || '');\n\n        return (\n          <div style={{ padding: '12px 16px' }}>\n            <Space direction=\"vertical\" size=\"16px\">\n              <Input.Search\n                allowClear\n                value={state}\n                placeholder=\"Search name\"\n                onChange={(value) => {\n                  setState(value);\n                }}\n              />\n              <Space>\n                <Button\n                  type=\"brand\"\n                  onClick={() => {\n                    setFilterValue(state);\n                    close();\n                  }}\n                  themeStyle={miniBtnStyle}\n                >\n                  Confirm\n                </Button>\n                <Button\n                  type=\"outline\"\n                  status=\"default\"\n                  onClick={() => {\n                    close();\n                  }}\n                  themeStyle={miniBtnStyle}\n                >\n                  Cancel\n                </Button>\n              </Space>\n            </Space>\n          </div>\n        );\n      },\n      onFilter: (value, row) => (value ? row.name.indexOf(value) !== -1 : true),\n    },\n    {\n      title: 'Salary',\n      dataIndex: 'salary',\n      width: 140,\n    },\n    {\n      title: 'Job',\n      dataIndex: 'job',\n      filterDropdown: ({ value, setFilterValue, close }) => {\n        const [state, setState] = React.useState(value || []);\n\n        return (\n          <div style={{ padding: '12px 16px' }}>\n            <Space direction=\"vertical\" size=\"0\">\n              <CheckboxGroup\n                options={options}\n                onChange={(value) => {\n                  setState(value);\n                }}\n                value={state}\n                direction=\"vertical\"\n              />\n              <Space>\n                <Button\n                  type=\"brand\"\n                  onClick={() => {\n                    if(Array.isArray(state)) {\n                      state.length === 0 ? setFilterValue(undefined) : setFilterValue(state);\n                    }\n                    close();\n                  }}\n                  themeStyle={miniBtnStyle}\n                >\n                  Confirm\n                </Button>\n                <Button\n                  type=\"outline\"\n                  status=\"default\"\n                  onClick={() => {\n                    close();\n                  }}\n                  themeStyle={miniBtnStyle}\n                >\n                  Cancel\n                </Button>\n              </Space>\n            </Space>\n          </div>\n        );\n      },\n      onFilter: (value, row) => value.includes(row.job),\n      width: '40%',\n    },\n    {\n      title: 'Email',\n      dataIndex: 'email',\n      width: '60%',\n    },\n  ];\n  const data = [\n    {\n      key: '1',\n      name: 'Jane Doe',\n      salary: 23000,\n      job: 'programmer',\n      email: 'jane.doe@example.com',\n    },\n    {\n      key: '2',\n      name: 'Alisa Ross',\n      salary: 25000,\n      job: 'cook',\n      email: 'alisa.ross@example.com',\n    },\n    {\n      key: '3',\n      name: 'Kevin Sandra',\n      salary: 22000,\n      job: 'programmer',\n      email: 'kevin@example.com',\n    },\n    {\n      key: '4',\n      name: 'Ed Hellen',\n      salary: 17000,\n      job: 'athletes',\n      email: 'ed.hellen@example.com',\n    },\n    {\n      key: '5',\n      name: 'William Smith',\n      salary: 27000,\n      job: 'athletes',\n      email: 'william@example.com',\n    },\n  ];\n\n  return <Table columns={columns} data={data} />;\n}`;\n\nexport const filter = {\n  code,\n  namespace: Filter,\n};\n","import { BackEndFilter } from '../locale';\n\nconst code = `\nimport { Table, Input } from '@mx-design/web';\nconst CheckboxGroup = Checkbox.Group;\n\nconst options = [\n  {\n    label: 'programmer',\n    value: 'programmer',\n  },\n  {\n    label: 'cook',\n    value: 'cook',\n  },\n  {\n    label: 'athletes',\n    value: 'athletes',\n  },\n];\nconst miniBtnStyle = { fontSize: '12px', padding: '0 11px', height: '24px' };\n\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    job: 'programmer',\n    email: 'jane.doe@example.com',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    job: 'cook',\n    email: 'alisa.ross@example.com',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    job: 'programmer',\n    email: 'kevin@example.com',\n  },\n  {\n    key: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    job: 'athletes',\n    email: 'ed.hellen@example.com',\n  },\n  {\n    key: '5',\n    name: 'William Smith',\n    salary: 27000,\n    job: 'athletes',\n    email: 'william@example.com',\n  },\n];\n\nfunction App() {\n  const [name, setName] = React.useState('');\n  const [tableData, setTableData] = React.useState(data)\n  /**\n   * @zh 我们用 postRequest 来模拟后端处理过程\n   * @en you can request back-end service\n   */\n  const postRequest = ({ name }) =>\n    new Promise((res) => {\n      setTimeout(() => {\n        setTableData(data.filter((row) => (name ? row.name.indexOf(name) !== -1 : true)));\n      res();\n    }, 0);\n  });\n\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      width: 174,\n      filteredValue: name,\n      filterDropdown: ({ value, close }) => {\n        const [state, setState] = React.useState(value || '');\n        return (\n          <div style={{ padding: '12px 16px' }}>\n            <Space direction=\"vertical\" size=\"16px\">\n              <Input.Search\n                allowClear\n                value={state}\n                placeholder=\"Search name\"\n                onChange={(value) => {\n                  setState(value);\n                }}\n              />\n              <Space>\n                <Button\n                  type=\"brand\"\n                  onClick={() => {\n                    /**\n                     * @zh 我们用 postRequest 来模拟后端请求\n                     * @en you can request back-end service\n                     */\n                    postRequest({\n                      name: state\n                    }).then(() => {\n                      setName(state);\n                      close();\n                    })\n                  }}\n                  themeStyle={miniBtnStyle}\n                >\n                  Confirm\n                </Button>\n                <Button\n                  type=\"outline\"\n                  status=\"default\"\n                  onClick={() => {\n                    close();\n                  }}\n                  themeStyle={miniBtnStyle}\n                >\n                  Cancel\n                </Button>\n              </Space>\n            </Space>\n          </div>\n        );\n      },\n    },\n    {\n      title: 'Salary',\n      dataIndex: 'salary',\n      width: 140,\n    },\n    {\n      title: 'Job',\n      dataIndex: 'job',\n      width: '40%',\n    },\n    {\n      title: 'Email',\n      dataIndex: 'email',\n      width: '60%',\n    },\n  ];\n\n  return <Table columns={columns} data={tableData} />;\n}`;\n\nexport const backEndFilter = {\n  code,\n  namespace: BackEndFilter,\n};\n","import { SingleSort } from '../locale';\n\nconst code = `\nimport { Table } from '@mx-design/web';\n\nfunction App() {\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      handleAscendSort(currentDirection) {\n        /**\n         * @zh currentDirection 代表当前排序方向\n         * @en currentDirection represent current sort direction\n         */\n        console.log('currentDirection is',currentDirection)\n      },\n      handleDescendSort(currentDirection) {\n        console.log('currentDirection is',currentDirection)\n\n      },\n      sorter: (a, b) => {\n        if (a.name > b.name) {\n          return 1;\n        }\n        if (a.name < b.name) {\n          return -1;\n        }\n        return 0;\n      },\n    },\n    {\n      title: 'Age',\n      dataIndex: 'age',\n      defaultSortOrder: 'descend',\n      sorter: (a, b) => a.age - b.age,\n    },\n    {\n      title: 'Score A',\n      dataIndex: 'scoreA',\n    },\n    {\n      title: 'Score B',\n      dataIndex: 'scoreB',\n      sorter: (a, b) => a.scoreB - b.scoreB\n    },\n    {\n      title: 'Score C',\n      dataIndex: 'scoreC'\n    },\n  ];\n  const data = [\n    {\n      key: '1',\n      name: 'A',\n      age: 18,\n      scoreA: 100,\n      scoreB: 60,\n      scoreC: 70,\n    },\n    {\n      key: '2',\n      name: 'B',\n      age: 17,\n      scoreA: 100,\n      scoreB: 90,\n      scoreC: 80,\n    },\n    {\n      key: '3',\n      name: 'C',\n      age: 19,\n      scoreA: 100,\n      scoreB: 70,\n      scoreC: 60,\n    },\n    {\n      key: '4',\n      name: 'D',\n      age: 15,\n      scoreA: 80,\n      scoreB: 70,\n      scoreC: 100,\n    },\n    {\n      key: '5',\n      name: 'E',\n      age: 20,\n      scoreA: 80,\n      scoreB: 70,\n      scoreC: 90,\n    },\n  ];\n\n  return <Table columns={columns} data={data} />;\n}`;\n\nexport const singleSort = {\n  code,\n  namespace: SingleSort,\n};\n","import { BackEndSingleSort } from '../locale';\n\nconst code = `\nimport { Table, Input } from '@mx-design/web';\nconst data = [\n  {\n    key: '1',\n    name: 'A',\n    age: 18,\n    scoreA: 100,\n    scoreB: 60,\n    scoreC: 70,\n  },\n  {\n    key: '2',\n    name: 'B',\n    age: 17,\n    scoreA: 100,\n    scoreB: 90,\n    scoreC: 80,\n  },\n  {\n    key: '3',\n    name: 'C',\n    age: 19,\n    scoreA: 100,\n    scoreB: 70,\n    scoreC: 60,\n  },\n  {\n    key: '4',\n    name: 'D',\n    age: 15,\n    scoreA: 80,\n    scoreB: 70,\n    scoreC: 100,\n  },\n  {\n    key: '5',\n    name: 'E',\n    age: 20,\n    scoreA: 80,\n    scoreB: 70,\n    scoreC: 90,\n  },\n];\n\nfunction App() {\n  const [sortOder, setSortOrder] = React.useState({});\n  const [tableData, setTableData] = React.useState(data);\n  /**\n   * @zh 我们用 postRequest 来模拟后端处理过程\n   * @en you can request back-end service\n   */\n  const postRequest = ({ age }) => new Promise(res => {\n    setTimeout(() => {\n      if(!age){\n        setTableData(data);\n        return res();\n      }\n      if(age === 'ascend') {\n        setTableData(data.slice(0).sort((a, b) => a.age - b.age));\n        return res();\n      }\n      if(age === 'descend') {\n        setTableData(data.slice(0).sort((a, b) => b.age - a.age));\n        return res();\n      }\n    }, 0)\n  });\n\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n    },\n    {\n      title: 'Age',\n      dataIndex: 'age',\n      sortOrder: sortOder.age,\n      handleAscendSort(currentDirection) {\n        console.log('currentDirection: ', currentDirection);\n        if (currentDirection !== 'ascend') {\n          /**\n           * @zh 我们用 postRequest 来模拟后端请求\n           * @en you can request back-end service\n           */\n          postRequest({\n            age: 'ascend',\n          }).then(() => {\n            setSortOrder({\n              age: 'ascend',\n            });\n          })          \n        } else {\n          postRequest({}).then(() => {\n            setSortOrder({});\n          })\n        }\n      },\n      handleDescendSort(currentDirection) {\n        if (currentDirection !== 'descend') {\n          postRequest({\n            age: 'descend',\n          }).then(() => {\n            setSortOrder({\n              age: 'descend',\n            });\n          })    \n        } else {\n          postRequest({}).then(() => {\n            setSortOrder({});\n          })\n        }\n      },\n    },\n    {\n      title: 'Score A',\n      dataIndex: 'scoreA',\n    },\n    {\n      title: 'Score B',\n      dataIndex: 'scoreB',\n    },\n    {\n      title: 'Score C',\n      dataIndex: 'scoreC',\n    },\n  ];\n\n  return <Table columns={columns} data={tableData} />;\n}`;\n\nexport const backEndSingleSort = {\n  code,\n  namespace: BackEndSingleSort,\n};\n","import { MultiSort } from '../locale';\n\nconst code = `\nimport { Table } from '@mx-design/web';\n\nfunction App() {\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      handleAscendSort(currentDirection) {\n        /**\n         * @zh currentDirection 代表当前排序方向\n         * @en currentDirection represent current sort direction\n         */\n        console.log('currentDirection is',currentDirection)\n      },\n      handleDescendSort(currentDirection) {\n        console.log('currentDirection is',currentDirection)\n\n      },\n      sorter: (a, b) => {\n        if (a.name > b.name) {\n          return 1;\n        }\n        if (a.name < b.name) {\n          return -1;\n        }\n        return 0;\n      },\n    },\n    {\n      title: 'Age',\n      dataIndex: 'age',\n    },\n    {\n      title: 'Score A',\n      dataIndex: 'scoreA',\n      defaultSortOrder: 'descend',\n      sorter: {\n        compare: (a, b) => a.scoreA - b.scoreA,\n        multiple: 3,\n      },\n    },\n    {\n      title: 'Score B',\n      dataIndex: 'scoreB',\n      defaultSortOrder: 'ascend',\n      sorter: {\n        compare: (a, b) => a.scoreB - b.scoreB,\n        multiple: 2,\n      },\n    },\n    {\n      title: 'Score C',\n      dataIndex: 'scoreC',\n      sorter: {\n        compare: (a, b) => a.scoreC - b.scoreC,\n        multiple: 1,\n      },\n    },\n  ];\n  const data = [\n    {\n      key: '1',\n      name: 'A',\n      age: 18,\n      scoreA: 100,\n      scoreB: 60,\n      scoreC: 70,\n    },\n    {\n      key: '2',\n      name: 'B',\n      age: 17,\n      scoreA: 100,\n      scoreB: 90,\n      scoreC: 80,\n    },\n    {\n      key: '3',\n      name: 'C',\n      age: 19,\n      scoreA: 100,\n      scoreB: 70,\n      scoreC: 60,\n    },\n    {\n      key: '4',\n      name: 'D',\n      age: 15,\n      scoreA: 80,\n      scoreB: 70,\n      scoreC: 100,\n    },\n    {\n      key: '5',\n      name: 'E',\n      age: 20,\n      scoreA: 80,\n      scoreB: 70,\n      scoreC: 90,\n    },\n  ];\n\n  return <Table columns={columns} data={data} />;\n}`;\n\nexport const multiSort = {\n  code,\n  namespace: MultiSort,\n};\n","import { BackEndMultiSort } from '../locale';\n\nconst code = `\nimport { Table } from '@mx-design/web';\n\nconst data = [\n  {\n    key: '1',\n    name: 'A',\n    age: 18,\n    scoreA: 100,\n    scoreB: 60,\n    scoreC: 70,\n  },\n  {\n    key: '2',\n    name: 'B',\n    age: 17,\n    scoreA: 100,\n    scoreB: 90,\n    scoreC: 80,\n  },\n  {\n    key: '3',\n    name: 'C',\n    age: 19,\n    scoreA: 100,\n    scoreB: 70,\n    scoreC: 60,\n  },\n  {\n    key: '4',\n    name: 'D',\n    age: 15,\n    scoreA: 80,\n    scoreB: 70,\n    scoreC: 100,\n  },\n  {\n    key: '5',\n    name: 'E',\n    age: 20,\n    scoreA: 80,\n    scoreB: 70,\n    scoreC: 90,\n  },\n];\n\nconst sortFns = (sortDirectionA, sortDirectionB) => [\n  {\n    sortFn: (a, b) => {\n      if(!sortDirectionA) return 0;\n      if (sortDirectionA === 'ascend') return a.scoreA - b.scoreA;\n      if (sortDirectionA === 'descend') return b.scoreA - a.scoreA;\n    },\n  },\n  {\n    sortFn: (a, b) => {\n      if(!sortDirectionB) return 0;\n      if (sortDirectionB === 'ascend') return a.scoreB - b.scoreB;\n      if (sortDirectionB === 'descend') return b.scoreB - a.scoreB;\n    },\n  },\n];\n\n\nfunction App() {\n  const [sortOder, setSortOrder] = React.useState({});\n  const [tableData, setTableData] = React.useState(data);\n  /**\n   * @zh 我们用 postRequest 来模拟后端处理过程\n   * @en you can request back-end service\n   */\n  const postRequest = ({ scoreA, scoreB }) =>\n    new Promise((res) => {\n      setTimeout(() => {\n        if (!scoreA && !scoreB) {\n          setTableData(data);\n          return res();\n        }\n        const compareSorter = sortFns(scoreA, scoreB);\n        const newTableData = [...data].sort((a, b) => {\n          for (let i = 0; i < compareSorter.length; i++) {\n            const { sortFn } = compareSorter[i];\n            const result = sortFn(a, b);\n            if (result !== 0) return result;\n          }\n          return 0;\n        });\n        setTableData(newTableData);\n        res();\n      }, 0);\n    });\n\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n    },\n    {\n      title: 'Age',\n      dataIndex: 'age',\n    },\n    {\n      title: 'Score A',\n      dataIndex: 'scoreA',\n      sortOrder: sortOder.scoreA,\n      handleAscendSort(currentDirection) {\n        if (currentDirection !== 'ascend') {\n          postRequest({\n            scoreA: 'ascend',\n            scoreB: sortOder.scoreB,\n          }).then(() => {\n            setSortOrder({\n              scoreA: 'ascend',\n              scoreB: sortOder.scoreB,\n            });\n          });\n        } else {\n          postRequest({\n            scoreB: sortOder.scoreB,\n          }).then(() => {\n            setSortOrder({\n              scoreB: sortOder.scoreB,\n            });\n          });\n        }\n      },\n      handleDescendSort(currentDirection) {\n        if (currentDirection !== 'descend') {\n          postRequest({\n            scoreA: 'descend',\n            scoreB: sortOder.scoreB,\n          }).then(() => {\n            setSortOrder({\n              scoreA: 'descend',\n              scoreB: sortOder.scoreB,\n            });\n          });\n        } else {\n          postRequest({\n            scoreB: sortOder.scoreB,\n          }).then(() => {\n            setSortOrder({\n              scoreB: sortOder.scoreB,\n            });\n          });\n        }\n      },\n      sorter: {\n        multiple: 3,\n      },\n    },\n    {\n      title: 'Score B',\n      dataIndex: 'scoreB',\n      sortOrder: sortOder.scoreB,\n      handleAscendSort(currentDirection) {\n        if (currentDirection !== 'ascend') {\n          /**\n           * @zh 我们用 postRequest 来模拟后端请求\n           * @en you can request back-end service\n           */\n          postRequest({\n            scoreA: sortOder.scoreA,\n            scoreB: 'ascend',\n          }).then(() => {\n            setSortOrder({\n              scoreA: sortOder.scoreA,\n              scoreB: 'ascend',\n            });\n          });\n        } else {\n          postRequest({\n            scoreB: sortOder.scoreA,\n          }).then(() => {\n            setSortOrder({\n              scoreB: sortOder.scoreA,\n            });\n          });\n        }\n      },\n      handleDescendSort(currentDirection) {\n        if (currentDirection !== 'descend') {\n          postRequest({\n            scoreA: sortOder.scoreA,\n            scoreB: 'descend',\n          }).then(() => {\n            setSortOrder({\n              scoreA: sortOder.scoreA,\n              scoreB: 'descend',\n            });\n          });\n        } else {\n          postRequest({\n            scoreA: sortOder.scoreA,\n          }).then(() => {\n            setSortOrder({\n              scoreA: sortOder.scoreA,\n            });\n          })\n        };\n      },\n      sorter: {\n        multiple: 2,\n      },      \n    },\n    {\n      title: 'Score C',\n      dataIndex: 'scoreC',\n    }\n  ];\n  return <Table columns={columns} data={tableData} />;\n}`;\n\nexport const backEndMultiSort = {\n  code,\n  namespace: BackEndMultiSort,\n};\n","import { UncontrolledPagination } from '../locale';\n\nconst code = `\nimport { Table, TableColumnProps } from '@mx-design/web';\n\nconst data = Array(60)\n  .fill('')\n  .map((_, index) => ({\n    key: \\`\\${index}\\`,\n    name: \\`Kevin \\${index}\\`,\n    salary: 22000,\n    address: \\`\\${index} Park Road, London\\`,\n    email: \\`kevin.sandra_\\${index}@example.com\\`,\n  }));\n\nconst miniBtnStyle = { fontSize: '12px', padding: '0 11px', height: '24px' };\n\nfunction App() {\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      width: 174,\n      filterDropdown: ({ value, setFilterValue, close }) => {\n        const [state, setState] = React.useState(value || '');\n\n        return (\n          <div style={{ padding: '12px 16px' }}>\n            <Space direction=\"vertical\" size=\"16px\">\n              <Input.Search\n                allowClear\n                value={state}\n                placeholder=\"Search name\"\n                onChange={(value) => {\n                  setState(value);\n                }}\n              />\n              <Space>\n                <Button\n                  type=\"brand\"\n                  onClick={() => {\n                    setFilterValue(state);\n                    close();\n                  }}\n                  themeStyle={miniBtnStyle}\n                >\n                  Confirm\n                </Button>\n                <Button\n                  type=\"outline\"\n                  status=\"default\"\n                  onClick={() => {\n                    close();\n                  }}\n                  themeStyle={miniBtnStyle}\n                >\n                  Cancel\n                </Button>\n              </Space>\n            </Space>\n          </div>\n        );\n      },\n      onFilter: (value, row) => (value ? row.name.indexOf(value) !== -1 : true),\n    },\n    {\n      title: 'Salary',\n      dataIndex: 'salary',\n      width: 100\n    },\n    {\n      title: 'Address',\n      dataIndex: 'address',\n      width: '40%'\n    },\n    {\n      title: 'Email',\n      dataIndex: 'email',\n       width: '60%'\n    },\n  ];\n\n\n  return <Table columns={columns} data={data} pagination={{ pageSize: 5  }} />;\n}`;\n\nexport const uncontrolledPagination = {\n  code,\n  namespace: UncontrolledPagination,\n};\n","import { ExpandRow } from '../locale';\n\nconst code = `\nimport { Table } from '@mx-design/web';\n\nfunction App() {\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      width: 174,\n    },\n    {\n      title: 'Salary',\n      dataIndex: 'salary',\n      width: 100,\n    },\n    {\n      title: 'Address',\n      dataIndex: 'address',\n      width: '40%',\n    },\n    {\n      title: 'Email',\n      dataIndex: 'email',\n      width: '60%',\n    },\n  ];\n  const data = [\n    {\n      key: '1',\n      name: 'Jane Doe',\n      salary: 23000,\n      address: '32 Park Road, London',\n      email: 'jane.doe@example.com',\n    },\n    {\n      key: '2',\n      name: 'Alisa Ross',\n      salary: 25000,\n      address: '35 Park Road, London',\n      email: 'alisa.ross@example.com',\n    },\n    {\n      key: '4',\n      name: 'Ed Hellen',\n      salary: 17000,\n      address: '42 Park Road, London',\n      email: 'ed.hellen@example.com',\n    },\n    {\n      key: '7',\n      name: 'Kevin Sandra',\n      salary: 22000,\n      address: '31 Park Road, London',\n      email: 'kevin.sandra@example.com',\n    },\n  ];\n  const [type, setType] = React.useState('checkbox');\n  const [selectedRowKeys, setSelectedRowKeys] = React.useState(['4']);\n\n  return (\n    <Table\n      columns={columns}\n      data={data}\n      expandedRowRender={(record) => {\n        return \\`This is No.\\${record.key} description.\\`;\n      }}\n      onExpand={(detail, expanded) => {\n        console.log(detail, expanded);\n      }}\n      onExpandedRowsChange={(expandedRows) => {\n        console.log(expandedRows);\n      }}\n      expandProps={{\n        expandRowByClick: true,\n        rowExpandable: (record) => record.key !== '4',\n      }}\n    />\n  );\n}`;\n\nexport const expandRow = {\n  code,\n  namespace: ExpandRow,\n};\n","import { NestedTable } from '../locale';\n\nconst code = `\nimport { Table } from '@mx-design/web';\n\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      width: 174,\n    },\n    {\n      title: 'Salary',\n      dataIndex: 'salary',\n      width: 100,\n    },\n    {\n      title: 'Address',\n      dataIndex: 'address',\n      width: '40%',\n    },\n    {\n      title: 'Email',\n      dataIndex: 'email',\n      width: '60%',\n    },\n  ];\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, London',\n    email: 'alisa.ross@example.com',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n  {\n    key: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    address: '42 Park Road, London',\n    email: 'ed.hellen@example.com',\n  },\n  {\n    key: '5',\n    name: 'William Smith',\n    salary: 27000,\n    address: '62 Park Road, London',\n    email: 'william.smith@example.com',\n  },\n];\nfunction App() {\n  function expandedRowRender() {\n    return <Table columns={columns} data={data} pagination={false} />;\n  }\n  return <Table indentSize={60} expandedRowRender={expandedRowRender} columns={columns} data={data} />;\n}`;\n\nexport const nestedTable = {\n  code,\n  namespace: NestedTable,\n};\n","import { TreeData } from '../locale';\n\nconst code = `\nimport { Table, Radio, Space } from '@mx-design/web';\n\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    width: 174,\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n    width: 100,\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    width: '40%',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n    width: '60%',\n  },\n];\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n    children: [\n      {\n        key: '1-1',\n        name: 'Christina',\n        address: '332 Park Road, London',\n        email: 'christina@example.com',\n      },\n    ],\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, London',\n    email: 'alisa.ross@example.com',\n    children: [\n      {\n        key: '2-1',\n        name: 'Ed Hellen',\n        salary: 17000,\n        address: '42 Park Road, London',\n        email: 'ed.hellen@example.com',\n        children: [\n          {\n            key: '2-1-1',\n            name: 'Eric Miller',\n            salary: 23000,\n            address: '67 Park Road, London',\n            email: 'eric.miller@example.com',\n          },\n          {\n            key: '2-1-2',\n            name: 'Tom Jerry',\n            salary: 666,\n            address: '67 Park Road, London',\n            email: 'tom.jerry@example.com',\n          },\n        ],\n      },\n      {\n        key: '2-2',\n        name: 'William Smith',\n        salary: 27000,\n        address: '62 Park Road, London',\n        email: 'william.smith@example.com',\n      },\n      {\n        key: '2-3',\n        name: 'George Bush',\n        salary: 24000,\n        address: '62 Park Road, London',\n        email: 'george.bush@example.com',\n      },\n    ],\n  },\n  {\n    key: '7',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n];\n\nconst RadioGroup = Radio.Group;\n\nfunction App() {\n  const [checkStrictly, setCheckStrictly] = React.useState(false);\n\n  return (\n    <Space direction=\"vertical\">\n      <RadioGroup type=\"button\" value={checkStrictly} onChange={(checked) => setCheckStrictly(checked)}>\n        <Radio value={false}>not checkStrictly</Radio>\n        <Radio value>checkStrictly</Radio>\n      </RadioGroup>\n      <Table\n        rowSelection={{\n          type: 'checkbox',\n          onChange: (selectedRowKeys, selectedRows) => {\n            console.log(selectedRowKeys, selectedRows);\n          },\n          checkStrictly,\n        }}\n        columns={columns}\n        data={data}\n      />\n    </Space>\n  );\n}`;\n\nexport const treeData = {\n  code,\n  namespace: TreeData,\n};\n","import { CustomCell } from '../locale';\n\nconst code = `\nimport { Table, Tag } from '@mx-design/web';\n\nfunction App() {\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      width: 174,\n      render: (text) => <Tag type=\"light\" status=\"brand\">{text}</Tag>, \n    },\n    {\n      title: 'Salary',\n      dataIndex: 'salary',\n      width: 100,\n     \n    },\n    {\n      title: 'Address',\n      dataIndex: 'address',\n      width: '40%',\n    },\n    {\n      title: 'Email',\n      dataIndex: 'email',\n      width: '60%',\n    },\n  ];\n  const data = [\n    {\n      key: '1',\n      name: 'Jane Doe',\n      salary: 23000,\n      address: '32 Park Road, London',\n      email: 'jane.doe@example.com',\n    },\n    {\n      key: '2',\n      name: 'Alisa Ross',\n      salary: 25000,\n      address: '35 Park Road, London',\n      email: 'alisa.ross@example.com',\n    },\n    {\n      key: '3',\n      name: 'Kevin Sandra',\n      salary: 22000,\n      address: '31 Park Road, London',\n      email: 'kevin.sandra@example.com',\n    },\n    {\n      key: '4',\n      name: 'Ed Hellen',\n      salary: 17000,\n      address: '42 Park Road, London',\n      email: 'ed.hellen@example.com',\n    },\n    {\n      key: '5',\n      name: 'William Smith',\n      salary: 27000,\n      address: '62 Park Road, London',\n      email: 'william.smith@example.com',\n    },\n  ];\n\n  return <Table columns={columns} data={data} />;\n}`;\n\nexport const customCell = {\n  code,\n  namespace: CustomCell,\n};\n","import { FixedColumn } from '../locale';\n\nconst code = `\nimport { Table } from '@mx-design/web';\n\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    width: 140,\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  },\n  {\n    title: 'Other',\n    dataIndex: 'other',\n    render: () => 'Other',\n  },\n  {\n    title: 'Other 1',\n    dataIndex: 'other1',\n    render: () => 'Other 1',\n  },\n  {\n    title: 'Other 2',\n    dataIndex: 'other2',\n    width: 120,\n    render: () => 'Other 2',\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n    width: 120,\n  },\n];\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, London',\n    email: 'alisa.ross@example.com',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n  {\n    key: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    address: '42 Park Road, London',\n    email: 'ed.hellen@example.com',\n  },\n  {\n    key: '5',\n    name: 'William Smith',\n    salary: 27000,\n    address: '62 Park Road, London',\n    email: 'william.smith@example.com',\n  },\n];\n\nfunction App() {\n  return (\n    <Table\n      leftFixedColumnsLength={1}\n      rightFixedColumnsLength={2}\n      columns={columns}\n      data={data}\n      expandedRowRender={(record) => \\`\\${record.name}'s address is \\${record.address}\\`}\n      rowSelection={{}}\n      scroll={{\n        x: 1600,\n        y: 400,\n      }}\n    />\n  );\n}`;\n\nexport const fixedColumn = {\n  code,\n  namespace: FixedColumn,\n};\n","import { FixedHeader } from '../locale';\n\nconst code = `\nimport { Table } from '@mx-design/web';\n\nfunction App() {\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      width: 174,\n    },\n    {\n      title: 'Salary',\n      dataIndex: 'salary',\n      width: 100,\n    },\n    {\n      title: 'Address',\n      dataIndex: 'address',\n      width: '40%',\n    },\n    {\n      title: 'Email',\n      dataIndex: 'email',\n      width: '60%',\n    },\n  ];\n  const data = [\n    {\n      key: '4',\n      name: 'John Smith',\n      salary: 24000,\n      address: '28 Park Road, London',\n      email: 'john.smith@example.com',\n    },\n    {\n      key: '5',\n      name: 'Emily Johnson',\n      salary: 26000,\n      address: '29 Park Road, London',\n      email: 'emily.johnson@example.com',\n    },\n    {\n      key: '6',\n      name: 'Michael Brown',\n      salary: 27000,\n      address: '30 Park Road, London',\n      email: 'michael.brown@example.com',\n    },\n    {\n      key: '8',\n      name: 'Sophia Davis',\n      salary: 21000,\n      address: '33 Park Road, London',\n      email: 'sophia.davis@example.com',\n    },\n    {\n      key: '9',\n      name: 'William Wilson',\n      salary: 28000,\n      address: '34 Park Road, London',\n      email: 'william.wilson@example.com',\n    },\n    {\n      key: '10',\n      name: 'Olivia Thompson',\n      salary: 23000,\n      address: '36 Park Road, London',\n      email: 'olivia.thompson@example.com',\n    },\n    {\n      key: '11',\n      name: 'James Taylor',\n      salary: 25000,\n      address: '37 Park Road, London',\n      email: 'james.taylor@example.com',\n    },\n    {\n      key: '12',\n      name: 'Ava Martinez',\n      salary: 22000,\n      address: '38 Park Road, London',\n      email: 'ava.martinez@example.com',\n    },\n    {\n      key: '13',\n      name: 'Liam Anderson',\n      salary: 29000,\n      address: '39 Park Road, London',\n      email: 'liam.anderson@example.com',\n    },\n    {\n      key: '14',\n      name: 'Emma Thomas',\n      salary: 24000,\n      address: '40 Park Road, London',\n      email: 'emma.thomas@example.com',\n    },\n  ];\n\n  return <Table columns={columns} data={data} scroll={{ y: 172 }} />;\n}`;\n\nexport const fixedHeader = {\n  code,\n  namespace: FixedHeader,\n};\n","import { GroupColumns } from '../locale';\n\nconst code = `\nimport { Table } from '@mx-design/web';\n\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    width: 140,\n  },\n  {\n    title: 'User Info',\n    children: [\n      {\n        title: 'Birthday',\n        dataIndex: 'birthday',\n      },\n      {\n        title: 'Address',\n        children: [\n          {\n            title: 'City',\n            dataIndex: 'city',\n          },\n          {\n            title: 'Road',\n            dataIndex: 'road',\n          },\n          {\n            title: 'No.',\n            dataIndex: 'no',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    title: 'Information',\n    children: [\n      {\n        title: 'Email',\n        dataIndex: 'email',\n      },\n      {\n        title: 'Phone',\n        dataIndex: 'phone',\n      },\n    ],\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n    width: 120,\n  },\n  {\n    title: 'Gender',\n    dataIndex: 'gender',\n    width: 110,\n  },\n];\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    birthday: '1994-04-21',\n    city: 'London',\n    road: 'Park',\n    no: '34',\n    phone: '12345678',\n    email: 'jane.doe@example.com',\n    gender: 'female',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    birthday: '1994-05-21',\n    city: 'London',\n    road: 'Park',\n    no: '37',\n    phone: '12345678',\n    email: 'alisa.ross@example.com',\n    gender: 'female',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    birthday: '1992-02-11',\n    city: 'Paris',\n    road: 'Arco',\n    no: '67',\n    phone: '12345678',\n    email: 'kevin.sandra@example.com',\n    gender: 'male',\n  },\n  {\n    key: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    birthday: '1991-06-21',\n    city: 'London',\n    road: 'Park',\n    no: '317',\n    phone: '12345678',\n    email: 'ed.hellen@example.com',\n    gender: 'female',\n  },\n  {\n    key: '5',\n    name: 'William Smith',\n    salary: 27000,\n    birthday: '1996-08-21',\n    city: 'Paris',\n    road: 'Park',\n    no: '114',\n    phone: '12345678',\n    email: 'william.smith@example.com',\n    gender: 'male',\n  },\n];\n\nfunction App() {\n  return (\n    <Table\n      leftFixedColumnsLength={1}\n      rightFixedColumnsLength={2}\n      expandedRowRender={(record) => \\`\\${record.name}'s address is \\${record.address}\\`}\n      rowSelection={{}}\n      scroll={{\n        x: 1200,\n      }}\n      border={{\n        wrapper: true,\n        cell: true,\n      }}\n      columns={columns}\n      data={data}\n    />\n  );\n}`;\n\nexport const groupColumns = {\n  code,\n  namespace: GroupColumns,\n};\n","import { CellMerge } from '../locale';\n\nconst code = `\nimport { Table } from '@mx-design/web';\n\nfunction isPlainObject(value) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n}\n\nfunction App() {\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      width: 174,\n      render: (col, record, index) => {\n        if (isPlainObject(record.name)) {\n          const valueObj = record.name;\n          return {\n            children: valueObj.children,\n            props: valueObj.props,\n          };\n        }\n        return col;\n      },\n    },\n    {\n      title: 'Salary',\n      dataIndex: 'salary',\n      width: 100,\n    },\n    {\n      title: 'Address',\n      dataIndex: 'address',\n      width: '40%',\n      render: (col, record, index) => {\n        if (isPlainObject(record.address)) {\n          const valueObj = record.address;\n          return {\n            children: valueObj.children,\n            props: valueObj.props,\n          };\n        }\n        if (col) return col;\n        return {\n          props: {\n            colSpan: 0,\n            rowSpan: 0,\n          },\n        };\n      },\n    },\n    {\n      title: 'Email',\n      dataIndex: 'email',\n      width: '60%',\n    },\n  ];\n  const data = [\n    {\n      key: '1',\n      name: 'Jane Doe',\n      salary: 23000,\n      address: {\n        children: '32 Park Road, London',\n        props: {\n          rowSpan: 3,\n        },\n      },\n      email: 'jane.doe@example.com',\n    },\n    {\n      key: '2',\n      name: 'Alisa Ross',\n      salary: 25000,\n      email: 'alisa.ross@example.com',\n    },\n    {\n      key: '3',\n      name: 'Kevin Sandra',\n      salary: 22000,\n      email: 'kevin.sandra@example.com',\n    },\n    {\n      key: '4',\n      name: 'Ed Hellen',\n      salary: 17000,\n      address: '42 Park Road, London',\n      email: 'ed.hellen@example.com',\n    },\n    {\n      key: '5',\n      name: {\n        children: 'William Smith',\n        props: {\n          colSpan: 2,\n        },\n      },\n      salary: 27000,\n      address: '62 Park Road, London',\n    },\n  ];\n\n  return (\n    <Table\n      columns={columns}\n      data={data}\n      pagination={false}\n      border={{\n        wrapper: true,\n        cell: true,\n      }}\n    />\n  );\n}`;\n\nexport const cellMerge = {\n  code,\n  namespace: CellMerge,\n};\n","import { basic } from './basic';\nimport { filter } from './filter';\nimport { backEndFilter } from './back-end-filter';\nimport { singleSort } from './single-sort';\nimport { backEndSingleSort } from './back-end-single-sort';\nimport { multiSort } from './multi-sort';\nimport { backEndMultiSort } from './back-end-multi-sort';\nimport { uncontrolledPagination } from './uncontrolledPagination';\nimport { expandRow } from './expand-row';\nimport { nestedTable } from './nested-table';\nimport { treeData } from './tree-data';\nimport { customCell } from './custom-cell';\nimport { fixedColumn } from './fixed-column';\nimport { fixedHeader } from './fixed-header';\nimport { groupColumns } from './group-columns';\nimport { cellMerge } from './cell-merge';\n\nexport const exampleList = {\n  [basic.namespace]: basic,\n  [filter.namespace]: filter,\n  [backEndFilter.namespace]: backEndFilter,\n  [singleSort.namespace]: singleSort,\n  [multiSort.namespace]: multiSort,\n  [backEndSingleSort.namespace]: backEndSingleSort,\n  [backEndMultiSort.namespace]: backEndMultiSort,\n  [uncontrolledPagination.namespace]: uncontrolledPagination,\n  [expandRow.namespace]: expandRow,\n  [nestedTable.namespace]: nestedTable,\n  [treeData.namespace]: treeData,\n  [customCell.namespace]: customCell,\n  [fixedColumn.namespace]: fixedColumn,\n  [fixedHeader.namespace]: fixedHeader,\n  [groupColumns.namespace]: groupColumns,\n  [cellMerge.namespace]: cellMerge,\n};\n","import React, { useMemo } from 'react';\nimport ComponentInnerLayout from '@/components/Layout/ComponentInnerLayout';\nimport { TABLE_KEY } from '@/constants';\nimport { useLocale } from '@/locale/useLocal/useLocal';\nimport { exampleList } from './examples';\nimport { ComponentCodeBlock } from '@/components/DemoBlock';\n\nfunction ButtonExample() {\n  const [local] = useLocale<typeof TABLE_KEY>({ namespace: TABLE_KEY });\n  const dataList = useMemo(\n    () =>\n      Object.keys(local).map((key) => ({\n        ...local[key],\n        ...exampleList[key],\n      })),\n    [local, exampleList]\n  );\n\n  const titleList = useMemo(\n    () =>\n      dataList.map((item) => ({\n        title: item.title,\n        href: `#${item.namespace}`,\n      })),\n    [dataList]\n  );\n\n  return (\n    <ComponentInnerLayout titleList={titleList}>\n      {dataList.map((data) => (\n        <ComponentCodeBlock key={data.namespace} {...data} />\n      ))}\n    </ComponentInnerLayout>\n  );\n}\nexport default ButtonExample;\n"],"names":["basic","code","namespace","Basic","filter","Filter","backEndFilter","BackEndFilter","singleSort","SingleSort","backEndSingleSort","BackEndSingleSort","multiSort","MultiSort","backEndMultiSort","BackEndMultiSort","uncontrolledPagination","UncontrolledPagination","expandRow","ExpandRow","nestedTable","NestedTable","treeData","TreeData","customCell","CustomCell","fixedColumn","FixedColumn","fixedHeader","FixedHeader","groupColumns","GroupColumns","cellMerge","CellMerge","exampleList","_exampleList","_defineProperty","_useLocale","useLocale","TABLE_KEY","local","_slicedToArray","dataList","useMemo","Object","keys","map","key","_objectSpread","titleList","item","title","href","concat","React","ComponentInnerLayout","data","ComponentCodeBlock","_extends"],"sourceRoot":""}