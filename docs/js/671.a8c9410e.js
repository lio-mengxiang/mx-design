"use strict";(self.webpackChunk_mx_design_example=self.webpackChunk_mx_design_example||[]).push([[671],{3671:(n,e,t)=>{t.r(e),t.d(e,{default:()=>k});var o,s=t(2798),a=t(9641),i=t(7059),c=t(2983),u=t(290),d=t(2359),r=t(3101),p=t(4911),l={code:"\nimport { useModal, Button } from '@mx-design/web';\n\nfunction App() {\n  const Modal = useModal();\n  return (\n    <Button\n      onClick={() => {\n  console.log('Moda2l: ', Modal, Modal.add);\n\n        const modalId = Modal.add({\n          title: 'Modal Title',\n          content: (\n            <div>\n              You can customize modal body text by the current situation. This modal will be closed immediately once you press the OK\n              button.\n            </div>\n          ),\n          visible: true,\n          onCancel: () => Modal.remove(modalId),\n        });\n      }}\n    >\n      Open Modal\n    </Button>\n  );\n}",namespace:d.Bb},m={code:"\nimport { useModal, Button, useMessage } from '@mx-design/web';\n\nfunction App() {\n  const Modal = useModal();\n  const Message = useMessage();\n  return (\n    <Button\n      onClick={() => {\n        const modalId = Modal.add({\n          title: 'Modal Title',\n          content: <div>Form xxx</div>,\n          visible: true,\n          onCancel: () => Modal.remove(modalId),\n          okLoading: false,\n          onOk: () => {\n            Modal.update({ id: modalId, okLoading: true });\n            new Promise((res) => {\n              setTimeout(() => {\n                res('complete');\n              }, 2000);\n            }).then((data) => {\n              Message.add({\n                type: 'success',\n                content: data,\n              });\n              Modal.remove(modalId);\n            });\n          },\n        });\n      }}\n    >\n      Open Modal with async logic\n    </Button>\n  );\n}",namespace:d.e2},g={code:"\nimport { useModal, Button, Space } from '@mx-design/web';\n\nfunction App() {\n  const Modal = useModal();\n  return (\n    <Space>\n    <Button\n      onClick={() => {\n        const modalId = Modal.add({\n          title: 'Modal Title',\n          content: (\n            <div>\n              You can customize modal body text by the current situation. This modal will be closed immediately once you press the OK\n              button.\n            </div>\n          ),\n          visible: true,\n          footer: <Button onClick={() => Modal.remove(modalId)}>customize Button</Button>\n        });\n      }}\n    >\n      Open Modal\n    </Button>\n    </Space>\n  );\n}",namespace:d.$_},M={code:"\nimport { useMessage, Button, Space } from '@mx-design/web';\n\nfunction App() {\n  const Message = useMessage();\n  return (\n    <Space>\n      <Button\n        onClick={() => {\n          Message.add({\n            id: 'aa',\n            type: 'info',\n            content: 'This is an info message!',\n          });\n        }}\n      >\n        Open Message\n      </Button>\n      <Button\n        status=\"default\"\n        onClick={() => {\n          Message.remove('aa');\n        }}\n      >\n        Close Message\n      </Button>\n    </Space>\n  );\n}",namespace:d.x8},f={code:"\nimport { useMessage, Button } from '@mx-design/web';\n\nfunction App() {\n  const Message = useMessage();\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Button\n          status=\"warning\"\n          onClick={() => {\n            Message.add({\n              type: 'warning',\n              position: 'top-left',\n              content: 'This is an info message!',\n            });\n          }}\n        >\n          Top Left\n        </Button>\n        <Button\n          status=\"success\"\n          onClick={() => {\n            Message.add({\n              type: 'success',\n              position: 'top',\n              content: 'This is an info message!',\n            });\n          }}\n        >\n          Top\n        </Button>\n        <Button\n          status=\"default\"\n          onClick={() => {\n            Message.add({\n              type: 'loading',\n              position: 'top-right',\n              content: 'This is an info message!',\n            });\n          }}\n        >\n          Top Right\n        </Button>\n      </Space>\n      <Space>\n        <Button\n          status=\"warning\"\n          onClick={() => {\n            Message.add({\n              type: 'warning',\n              position: 'bottom-left',\n              content: 'This is an info message!',\n            });\n          }}\n        >\n          Bottom Left\n        </Button>\n        <Button\n          status=\"success\"\n          onClick={() => {\n            Message.add({\n              type: 'success',\n              position: 'bottom',\n              content: 'This is an info message!',\n            });\n          }}\n        >\n          Bottom\n        </Button>\n        <Button\n          status=\"default\"\n          onClick={() => {\n            Message.add({\n              type: 'loading',\n              position: 'bottom-right',\n              content: 'This is an info message!',\n            });\n          }}\n        >\n          Bottom Right\n        </Button>\n      </Space>\n    </Space>\n  );\n}",namespace:d.Ly},B={code:"\nimport { useMessage, Button } from '@mx-design/web';\n\nfunction App() {\n  const Message = useMessage();\n  return (\n    <Button\n      onClick={() => {\n        Message.add({\n          type: 'info',\n          closable: true,\n          showIcon: false,\n          content: 'This is an info message!'\n        });\n      }}\n    >\n      Open Message\n    </Button>\n  );\n};",namespace:d.U1},b={code:"\nimport { useMessage, Button } from '@mx-design/web';\n\nfunction App() {\n  const Message = useMessage();\n\n  function updateMessage() {\n    const id = Message.add({\n      type: 'loading',\n      content: 'Will update after 1 seconds...',\n    });\n    setTimeout(() => {\n      Message.update(id, {\n        type: 'success',\n        content: 'Update success!',\n      });\n    },1000);\n  }\n\n  return (\n    <Button onClick={updateMessage}>\n      Update message\n    </Button>\n  );\n};",namespace:d.BN},y=(o={},(0,a.Z)(o,l.namespace,l),(0,a.Z)(o,m.namespace,m),(0,a.Z)(o,g.namespace,g),(0,a.Z)(o,b.namespace,b),(0,a.Z)(o,M.namespace,M),(0,a.Z)(o,f.namespace,f),(0,a.Z)(o,B.namespace,B),o);function h(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function O(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?h(Object(t),!0).forEach((function(e){(0,a.Z)(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):h(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}const k=function(){var n=(0,r.b)({namespace:d.fB}),e=(0,i.Z)(n,1)[0],t=(0,c.useMemo)((function(){return Object.keys(e).map((function(n){return O(O({},e[n]),y[n])}))}),[e,y]),o=(0,c.useMemo)((function(){return t.map((function(n){return{title:n.title,href:"#".concat(n.namespace)}}))}),[t]);return c.createElement(u.Z,{titleList:o},t.map((function(n){return c.createElement(p.AN,(0,s.Z)({key:n.namespace},n))})))}}}]);